# OIDC Redis Integration - Sample Environment Configuration
# Copy this file to .env and update with your actual values

# Database Configuration (if needed for your application)
DATABASE_URL="postgres://username:password@localhost:5432/database_name"

# OIDC Provider Configuration
# Replace with your OpenID Connect provider details
OIDC_AUTHORITY="https://your-oidc-provider.com/realms/your-realm"
OIDC_CLIENT_ID="your-client-id"
OIDC_CLIENT_SECRET="your-client-secret"
OIDC_REDIRECT_URI="http://localhost:3000/auth/callback"
OIDC_POST_LOGOUT_REDIRECT_URI="http://localhost:3000/"

# Redis Configuration
# Update these values to match your Redis instance
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Application Configuration
LOG_LEVEL=info
NODE_ENV=development
PORT=3000

# Feature Flags
PUBLIC_LEGACY_EMAIL_PASSWORD_LOGIN=false
PUBLIC_OIDC_LOGIN_ENABLED=true

# =============================================================================
# SETUP INSTRUCTIONS:
# =============================================================================
# 
# 1. OIDC Provider Setup:
#    - Set OIDC_AUTHORITY to your OpenID Connect provider's URL
#    - Examples:
#      - Keycloak: https://your-keycloak.com/realms/master
#      - Auth0: https://your-domain.auth0.com
#      - Azure AD: https://login.microsoftonline.com/tenant-id/v2.0
#      - Google: https://accounts.google.com
#
# 2. Client Registration:
#    - Register your application with your OIDC provider
#    - Set OIDC_CLIENT_ID to the client ID you receive
#    - Set OIDC_CLIENT_SECRET to the client secret (if using confidential client)
#    - Configure redirect URIs in your provider to match OIDC_REDIRECT_URI
#
# 3. Redis Setup:
#    - Install Redis locally or use a cloud Redis service
#    - Update REDIS_HOST and REDIS_PORT accordingly
#    - Set REDIS_PASSWORD if your Redis instance requires authentication
#    - Use REDIS_DB to specify which Redis database to use (0-15)
#
# 4. Local Development:
#    - Make sure Redis is running before starting the application
#    - For Docker: docker run -d -p 6379:6379 redis:7-alpine
#    - Test Redis connection: redis-cli ping (should return PONG)
#
# =============================================================================
# EXAMPLE CONFIGURATIONS:
# =============================================================================
#
# Example 1: Keycloak
# OIDC_AUTHORITY="https://keycloak.example.com/realms/master"
# OIDC_CLIENT_ID="my-app"
# OIDC_CLIENT_SECRET="abc123-secret-key"
#
# Example 2: Auth0
# OIDC_AUTHORITY="https://your-domain.auth0.com"
# OIDC_CLIENT_ID="your-auth0-client-id"
# OIDC_CLIENT_SECRET="your-auth0-client-secret"
#
# Example 3: Azure AD
# OIDC_AUTHORITY="https://login.microsoftonline.com/your-tenant-id/v2.0"
# OIDC_CLIENT_ID="your-azure-app-id"
# OIDC_CLIENT_SECRET="your-azure-client-secret"
#
# Example 4: Redis Cloud
# REDIS_HOST=redis-12345.cloud.redislabs.com
# REDIS_PORT=12345
# REDIS_PASSWORD=your-redis-password
# REDIS_DB=0
#
# =============================================================================
